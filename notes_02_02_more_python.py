# -*- coding: utf-8 -*-
"""NOTES 02.02 - MORE PYTHON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/rramosp/ai4eng.v1/blob/main/content/NOTES%2002.02%20-%20MORE%20PYTHON.ipynb

# 02.02 - MORE PYTHON
"""

!wget --no-cache -O init.py -q https://raw.githubusercontent.com/rramosp/ai4eng.v1/main/content/init.py
import init; init.init(force_download=False); init.get_weblink()

import numpy as np

"""## Functions

Recall that Python is an indented language. It does not uses any kind of brakets to delimit the scope of programming structures, which are signaled by **changes in indentation**

Arguments types are not declared, implementation must be prepared to deal with the data types you want

"""

def f1(a,b):
    r = a*2
    return r+b

def gt(a,b):
    if a>b:
        return a
    else:
        return b

f1(2,3)

f1(['hola', 2], [3])

f1('pepe', 'gotera')

gt(3,4)

gt("hola","adios")

"""functions can have default values"""

def f_power(x, p=2):
    return x**p

f_power(3)

f_power(3,2)

"""args can be named when calling the function and, if so, **any order** is ok"""

f_power(p=2, x=3)

"""functions can have functions defined within, but they are only visible inside the function"""

def f(a,b):
    def squared(x):
        return x**2
    return squared(a+b)

f(2,3)

squared(3)

"""functions are regular python objects which can be passed around"""

def apply_if_int(f, x):
    if type(x)==int:
        return f(x)

    return x

def cubed(x):
    return x**3

apply_if_int(cubed, 3)

apply_if_int(cubed, 3.)

"""`map` exploits this"""

map(cubed, [10,20,3,-2,9])

list(map(cubed, [10,20,3,-2,9]))

"""**lambda** functions are like constants"""

list(map(lambda x: x**2, [10,20,3,-2,9]))

"""and can even be used to define simple functions"""

sqrd = lambda x: x**2
sqrd(8)

list(map(sqrd, [10,20,3,-2,9]))

"""## Exceptions

**catching**
"""

int(3.2)

int("hola")

def int_times_two(x):
    try:
        return(int(x)*2)
    except ValueError:
        return 0

int_times_two(2)

int_times_two(2.5)

int_times_two("hola")

"""**raising**"""

def get_positive_integer_from_user():
    a = int(input("Enter a positive integer: "))
    if a <= 0:
        raise ValueError("That is not a positive number!")
    print ("thanks!")

get_positive_integer_from_user()

get_positive_integer_from_user()

"""## Comprehensions

**IF**
"""

a=15
if a > 10:
    s = "mayor que 10"
else:
    s = "menor que 10"

print(s)

a = 5
s = "mayor que 10" if a > 10 else "menor que 10"
print(s)

"""**FOR**"""

b = [1,10, 20.5, "hola", 10.4, 12]

r = []
for i in b:
    r.append(int_times_two(i))
r

r = [int_times_two(i) for i in b]
r

"""**FOR / IF filter**"""

r = [int_times_two(i) for i in b if type(i)!=int or i > 10]
r

"""**DICT**"""

r = {i: int_times_two(i) for i in b if type(i)!=int or i > 10}
r

r['hola']

