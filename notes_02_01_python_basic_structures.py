# -*- coding: utf-8 -*-
"""NOTES 02.01 - PYTHON BASIC STRUCTURES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/rramosp/ai4eng.v1/blob/main/content/NOTES%2002.01%20-%20PYTHON%20BASIC%20STRUCTURES.ipynb

# 02.01 - BASIC STRUCTURES
"""
import numpy as np
import sklearn.metrics

!wget --no-cache -O init.py -q https://raw.githubusercontent.com/rramosp/ai4eng.v1/main/content/init.py
import init; init.init(force_download=False); init.get_weblink()

"""## Introduction to Python

Python is **interpreted** and **dynamically typed**. Observe in the following lines:

- variables `a` and `b` have specific data types even if they are not explicitly defined.
- python guesses their types by how they are being used (`\\` is integer division, while `\` is floating point division)
- python keeps executing stuff while no error is found $\rightarrow$ python is interpreted
"""

a = 4
print (a, type(a))

b = 9.
print (a, type(b))

c = 9/4
print (c, type(c))

d = 9//4
print (d, type(d))
print (x)

"""but types can be enforced, or used for data conversion"""

a = 1
b = float(a)
print (a, "::", b)

s = "el valor de 'a' es "+str(a)
print (s)

"""## Notebook cell outputs"""

a = 1
b = float(a)
a,b

a = 1
a
b = float(a)
b

a = 1
print (a)
b = float(a)
b



"""## Lists

ordered sequences of objects of **any** kind with cool indexing.

indexing **starts at zero**.
"""

b = [1,10, 20.5, "hola", 10., 12, 13, 14., 15,16, 17., 18, 19, 20.]

print (len(b))

print (b[:3])

print (b[3:])

print (b[-3:])

print (b[4])

print (b[5:10])

print (b[-5:-2])

print (b[::2])

print (b[::-1])

b.append('elfin')
b

"""can use variables as indexes"""

import numpy as np
i = np.random.randint(len(b))
print (i, '-->', b[i])

"""truly **any** object"""

a = 32
b = 10
s = [1,2,3,"hola", [10, "nunca", 90], a==b, -32]

print (s)

print (len(s))

s[4]

s[4][1]

s[3][1]

s[2][1]

"""**some list operations**"""

a = ["hola", 2, "adios"]
b = [-10., 1, [3, 4]]

a + b

a + a

a*2

a - b

2 in a

"hola" not in b

[3,4] in b



"""## Strings

a string is like a special kind of list
"""

a = "en un lugar de la mancha"
a

a[3:]

a[-10:]

a[::-1]

a[::2]

'lugar' in a

"""with special operations"""

words = a.split()
words

"::".join(words)

a.upper()

a.startswith("en")

a.endswith("lugar")

a.find('lugar')

a[a.find('lugar'):]



"""## `for` loops

unlike other languages, `for` loops are defined over **iterables**. A `list` is an iterable, and there are many other iterables.

Python syntax is **indented**.

Observe python determines the semantics of `*` according to the context
"""

b = [1,10, 20.5, "hola", 10.]

for i in b:
    print (i, "-->", type(i), "x2 -->", i*2)

"""another example of python as interpreted language"""

b = [1,10, 20.5, "hola", 10.]
for i in b:
    print (i, "-->", type(i), "x2 -->", i**2)

"""**iterators**

sometimes we do not need to hold all the contents of a list in memory, but they can be generated as they are being asked for.
"""

k = range(-3,10,2)
k

"""size in memory"""

k.__sizeof__()

for i in k:
    print (i, end=", ")

big_range = range(0,100000,2)
big_range.__sizeof__()

s = 0
for i in big_range:
    s += i
s

"""if converted to a list, then they are physically in memory"""

a = list(big_range)
a.__sizeof__()

"""zip iterators"""

a = ["nada", "adios", 10.]
b = [1,10, 20.5, "hola", 10.]

for i,j in zip(a,b):
    print (i,j)



"""## Other control structures

string formatting / if / then / break / continue / while, etc.
"""

b = [1,10, 20.5, "hola", 10., 12]
for i in b:
    if i=='hola':
        break
    print (i, type(i))

b = [1,10, 20.5, "hola", 10., 12]
for i in b:
    if i=='hola':
        break
    elif type(i)==int:
        print ("INT", end=" ")
    elif i>10:
        print (">10", end=" ")
    print (i, type(i))

for i in b:
    if i=='hola':
        continue
    elif type(i)==int:
        print ("INT", end=" ")
    elif i>10:
        print (">10", end=" ")
    else:
        print ("UNK", end=" ")
    print (i, type(i))

for pos, i in enumerate(b):
    if i=='hola':
        continue
    print ("%02d :: %5.1f :: %20s"%(pos,i,type(i)))

i=1
while i<len(b):
    print (i, b[i], type(b[i]))
    i += 1

"""## Dictionaries"""

d = {"i1": 16, "nombre": "haskel", "edad": 32, 20: "el numero 20"}

d['i1']

d[20]

d.values()

d.keys()

for i in d.keys():
    print("la clave", i, "tiene el valor", d[i])

for k,v in d.items():
    print("la clave", k, "tiene el valor", v)

"""and can be updated"""

d[48] = "otro numero"
d["nada"] = 0

for k,v in d.items():
    print("la clave", k, "tiene el valor", v)

"""## Tuples

tuples are **inmutable** lists
"""

a = (10,3,4,5)

a[3], a[::-1], sum(a)

a[3]=1

"""and thus can be used for keys, indexing, etc."""

d = {}
d["hola"] = 3
d[1] = "one"
d[(4,5)] = "a tuple"
d

"""however"""

d[[4,5]]

